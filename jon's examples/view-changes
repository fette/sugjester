#!/bin/bash

# OmniFocus Change Viewer
# Query and display OmniFocus change logs with various time ranges

set -e

# Configuration
SCRIPT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
CHANGES_DIR="$SCRIPT_ROOT/activity/changes"

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Usage information
usage() {
    cat << EOF
Usage: $(basename "$0") [OPTIONS]

View OmniFocus change logs with various time ranges and filters.

OPTIONS:
    --today, -t         Show today's changes only
    --week, -w          Show changes from last 7 days
    --month, -m         Show changes from last 30 days
    --days N, -d N      Show changes from last N days
    --since DATE        Show changes since DATE (YYYY-MM-DD format)
    --range FROM TO     Show changes between FROM and TO dates
    --summary, -s       Show summary statistics only
    --help, -h          Show this help message

EXAMPLES:
    $(basename "$0") --today           # Today's changes
    $(basename "$0") --week            # Last 7 days
    $(basename "$0") --days 3          # Last 3 days  
    $(basename "$0") --since 2025-09-01     # Since September 1st
    $(basename "$0") --range 2025-09-01 2025-09-07   # Specific date range
    $(basename "$0") --summary --week  # Weekly summary statistics

EOF
}

# Date calculation functions
get_date_n_days_ago() {
    if command -v gdate >/dev/null 2>&1; then
        gdate -d "$1 days ago" +%Y-%m-%d
    else
        date -j -v-"$1"d +%Y-%m-%d
    fi
}

parse_date() {
    if command -v gdate >/dev/null 2>&1; then
        gdate -d "$1" +%Y-%m-%d 2>/dev/null
    else
        date -j -f "%Y-%m-%d" "$1" +%Y-%m-%d 2>/dev/null
    fi
}

# Get date range for different options
get_date_range() {
    local option="$1"
    local param="$2"
    local param2="$3"
    
    case "$option" in
        "today")
            echo "$(date +%Y-%m-%d) $(date +%Y-%m-%d)"
            ;;
        "week")
            echo "$(get_date_n_days_ago 7) $(date +%Y-%m-%d)"
            ;;
        "month") 
            echo "$(get_date_n_days_ago 30) $(date +%Y-%m-%d)"
            ;;
        "days")
            echo "$(get_date_n_days_ago "$param") $(date +%Y-%m-%d)"
            ;;
        "since")
            local since_date
            since_date=$(parse_date "$param")
            if [[ -z "$since_date" ]]; then
                echo "Error: Invalid date format '$param'. Use YYYY-MM-DD." >&2
                exit 1
            fi
            echo "$since_date $(date +%Y-%m-%d)"
            ;;
        "range")
            local from_date to_date
            from_date=$(parse_date "$param")
            to_date=$(parse_date "$param2")
            if [[ -z "$from_date" || -z "$to_date" ]]; then
                echo "Error: Invalid date format. Use YYYY-MM-DD for both dates." >&2
                exit 1
            fi
            echo "$from_date $to_date"
            ;;
    esac
}

# Generate date list between two dates
date_range() {
    local start_date="$1"
    local end_date="$2"
    local current="$start_date"
    
    while [[ "$current" <= "$end_date" ]]; do
        echo "$current"
        if command -v gdate >/dev/null 2>&1; then
            current=$(gdate -d "$current + 1 day" +%Y-%m-%d)
        else
            current=$(date -j -v+1d -f "%Y-%m-%d" "$current" +%Y-%m-%d)
        fi
    done
}

# Extract statistics from a log file
extract_stats() {
    local file="$1"
    
    if [[ ! -f "$file" ]]; then
        echo "0 0 0 0"
        return
    fi
    
    local new_tasks=$(grep -c "^- Task:" "$file" || echo "0")
    local new_projects=$(grep -c "^- Project:" "$file" || echo "0") 
    local completed=$(grep -c "completed at" "$file" || echo "0")
    local deleted=$(grep -c "(was in" "$file" || echo "0")
    
    echo "$new_tasks $new_projects $completed $deleted"
}

# Display summary statistics
show_summary() {
    local start_date="$1" 
    local end_date="$2"
    local period_name="$3"
    
    echo -e "${GREEN}OmniFocus Change Summary - $period_name${NC}"
    echo "$(printf '=%.0s' {1..50})"
    
    local total_new_tasks=0 total_new_projects=0 total_completed=0 total_deleted=0
    local days_with_activity=0
    
    while IFS= read -r date; do
        local log_file="$CHANGES_DIR/$date.log"
        if [[ -f "$log_file" ]]; then
            read -r new_tasks new_projects completed deleted <<< "$(extract_stats "$log_file")"
            
            if (( new_tasks + new_projects + completed + deleted > 0 )); then
                echo "  $date: $new_tasks new, $completed completed, $deleted deleted"
                ((days_with_activity++))
            fi
            
            ((total_new_tasks += new_tasks))
            ((total_new_projects += new_projects)) 
            ((total_completed += completed))
            ((total_deleted += deleted))
        fi
    done <<< "$(date_range "$start_date" "$end_date")"
    
    echo ""
    echo "TOTALS:"
    echo "  New Tasks: $total_new_tasks"
    echo "  New Projects: $total_new_projects"
    echo "  Completed Tasks: $total_completed" 
    echo "  Deleted Items: $total_deleted"
    echo "  Days with Activity: $days_with_activity"
}

# Display full change logs
show_changes() {
    local start_date="$1"
    local end_date="$2" 
    local period_name="$3"
    
    echo -e "${GREEN}OmniFocus Changes - $period_name${NC}"
    echo "$(printf '=%.0s' {1..50})"
    echo ""
    
    local found_any=false
    
    while IFS= read -r date; do
        local log_file="$CHANGES_DIR/$date.log"
        if [[ -f "$log_file" && -s "$log_file" ]]; then
            echo -e "${BLUE}$date:${NC}"
            # Skip the header line and show content
            tail -n +2 "$log_file" | sed 's/^/  /'
            echo ""
            found_any=true
        fi
    done <<< "$(date_range "$start_date" "$end_date")"
    
    if [[ "$found_any" == false ]]; then
        echo "No OmniFocus changes found for $period_name"
        echo ""
        echo "This could mean:"
        echo "  • No changes occurred during this period"
        echo "  • Change tracking wasn't running"
        echo "  • Log files don't exist yet"
        echo ""
        echo "To start change tracking, run: $SCRIPT_ROOT/install.sh"
    fi
}

# Main function
main() {
    local show_summary_only=false
    local option=""
    local param=""
    local param2=""
    
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --today|-t)
                option="today"
                shift
                ;;
            --week|-w)
                option="week" 
                shift
                ;;
            --month|-m)
                option="month"
                shift
                ;;
            --days|-d)
                option="days"
                param="$2"
                if [[ -z "$param" || ! "$param" =~ ^[0-9]+$ ]]; then
                    echo "Error: --days requires a number" >&2
                    exit 1
                fi
                shift 2
                ;;
            --since)
                option="since"
                param="$2"
                if [[ -z "$param" ]]; then
                    echo "Error: --since requires a date (YYYY-MM-DD)" >&2
                    exit 1
                fi
                shift 2
                ;;
            --range)
                option="range"
                param="$2"
                param2="$3"
                if [[ -z "$param" || -z "$param2" ]]; then
                    echo "Error: --range requires two dates (YYYY-MM-DD YYYY-MM-DD)" >&2
                    exit 1
                fi
                shift 3
                ;;
            --summary|-s)
                show_summary_only=true
                shift
                ;;
            --help|-h)
                usage
                exit 0
                ;;
            *)
                echo "Error: Unknown option '$1'" >&2
                echo "Use --help for usage information." >&2
                exit 1
                ;;
        esac
    done
    
    # Default to today if no option specified
    if [[ -z "$option" ]]; then
        option="today"
    fi
    
    # Get date range
    local date_range_result
    date_range_result=$(get_date_range "$option" "$param" "$param2")
    read -r start_date end_date <<< "$date_range_result"
    
    # Generate period name for display
    local period_name
    case "$option" in
        "today") period_name="Today" ;;
        "week") period_name="Last 7 days" ;;
        "month") period_name="Last 30 days" ;;
        "days") period_name="Last $param days" ;;
        "since") period_name="Since $param" ;;
        "range") period_name="$param to $param2" ;;
    esac
    
    # Show results
    if [[ "$show_summary_only" == true ]]; then
        show_summary "$start_date" "$end_date" "$period_name"
    else
        show_changes "$start_date" "$end_date" "$period_name"
    fi
}

# Ensure changes directory exists
if [[ ! -d "$CHANGES_DIR" ]]; then
    echo "Changes directory not found: $CHANGES_DIR"
    echo "Run the installer first: $SCRIPT_ROOT/install.sh"
    exit 1
fi

# Run the script
main "$@"